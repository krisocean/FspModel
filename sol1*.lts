/**
* Student Name: Yang Xiong
* Student Id  : 722890
* Model a bicycle quality control system in FSP. In this version, 
* there is only one belt, and deadlock could occur. 
**/


/* Constants */

/** 
* For every segment in the belt, there are three states. 0 means there is 
* no bicycle on the segment, 1 means there is a bicycle without tag on the 
* segment and 2 represent tagged bicycle on the segment. 
*/
const Empty = 0
const NoTaggedBicycle =1 
const TaggedBicycle = 2
range T = Empty..TaggedBicycle


/* Processes */ 

/** 
* Producer is a non-determinstic process. It can produce a tagged bicycle 
* or a normal bicycle, which has no tag.
**/
PRODUCER = (taggedBicycle -> PRODUCER | noTaggedBicycle -> PRODUCER).

/* Consumer will remove the bicycle from the belt */
CONSUMER = (remove -> CONSUMER).

/** 
* Belt has five indexs, which means the states of five segments. And Each
* segment has three states. The initial state of belt is all segment is 
* empty.  
*/
BELT = BELT[Empty][Empty][Empty][Empty][Empty],
BELT[first:T][second:T][third:T][forth:T][fifth:T] =(
	/** 
	* If the first segment is empty, we could place a tagged bicycle or a 
	* bicycle without tag on it. 
	*/
	  when (first == Empty) taggedBicycle -> 
	  				BELT[TaggedBicycle][second][third][forth][fifth]
	| when (first == Empty) noTaggedBicycle -> 
					BELT[NoTaggedBicycle][second][third][forth][fifth]
	/** 
	* If the fifth segment is not empty, we could remove the bicycle from
	* it. Then it's state becomes empty.
	*/
	| when (fifth != Empty) remove -> 
					BELT[first][second][third][forth][Empty]
	/**
	* If there is no bicycle on the fifth segment, whole belt is not empty
	* and all tagged bicycles on the thrid segment have been checked, then 
	* we could move the belt forward. 
	*/
	| when (fifth == Empty 
			&& (first != Empty || second!= Empty || third !=Empty
			|| forth!= Empty) && (third != TaggedBicycle)) move  -> 
		            BELT[Empty][first][second][third][forth]
    /** 
    * This part is doing the job of sensor, if sensor has found tagged bicycle
    * on third segment, then the robot will take it from belt to inspector. 
    */
	| when (third == TaggedBicycle) robotGet -> 
	                BELT[first][second][Empty][forth][fifth]
	/**
	* If the third segment is empty, then robot could put inspected bicycle 
	* back on the segment. 
	*/
	| when (third == Empty) robotPut -> 
	                BELT[first][second][NoTaggedBicycle][forth][fifth] 
	). 

/**
* Robot is supposed to get the tagged Bicycle form belt to inspector. And put 
* it back after inspecting. 
*/
ROBOT = (robotGet -> inspect -> robotPut -> ROBOT).

/* Inspector need to inspect tagged bicycle */
INSPECTOR = (inspect -> INSPECTOR).

/* To get the whole system, we need combine all processes together */
||SYSTEM = (PRODUCER || CONSUMER || BELT || ROBOT || INSPECTOR 
           || INSPECT_TAGGEDBICYCLE).


/* Safety properties */

/* Ensure all tagged bicycles are inspected */
property INSPECT_TAGGEDBICYCLE = (robotGet -> inspect -> robotPut -> 
								  INSPECT_TAGGEDBICYCLE).


/* Liveness properties */

/* Ensure these actions will be executed */
progress REMOVE = {remove}
progress PRODUCEBICYCLE = {taggedBicycle, noTaggedBicycle}
progress MOVEMENT = {move} 


